DVR

#include <stdio.h>

int main() {
    int cost[10][10], dist[10][10], from[10][10];
    int n, i, j, k, updated;

    printf("Enter the number of routers: ");
    scanf("%d", &n);

    printf("Enter the cost matrix (use 9999 for infinity):\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
            if (i == j)
                cost[i][j] = 0;
            dist[i][j] = cost[i][j];
            from[i][j] = j;
        }
    }

    // Distance Vector Routing update process
    do {
        updated = 0;
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                for (k = 0; k < n; k++) {
                    if (dist[i][j] > cost[i][k] + dist[k][j]) {
                        dist[i][j] = cost[i][k] + dist[k][j];
                        from[i][j] = k;
                        updated = 1;
                    }
                }
            }
        }
    } while (updated);

    // Print DVR table for each router
    for (i = 0; i < n; i++) {
        printf("\nDistance Vector Table for Router %d:\n", i);
        printf("--------------------------------------\n");
        printf("Destination\tNext Hop\tDistance\n");
        for (j = 0; j < n; j++) {
            if (dist[i][j] == 9999)
                printf("%d\t\t-\t\tâˆž\n", j);
            else
                printf("%d\t\t%d\t\t%d\n", j, from[i][j], dist[i][j]);
        }
    }

    return 0;
}




LB

#include <stdio.h>

int main() {
    int bucket_size, output_rate, n, i;
    int current_size = 0;

    printf("Enter bucket size: ");
    scanf("%d", &bucket_size);

    printf("Enter output rate: ");
    scanf("%d", &output_rate);

    printf("Enter number of packets: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        int packet_size;
        printf("\nPacket %d - Enter size: ", i + 1);
        scanf("%d", &packet_size);

        // Check if packet can be accepted
        if (packet_size <= (bucket_size - current_size)) {
            current_size += packet_size;
            printf("Packet accepted. ");
        } else {
            printf("Packet rejected (overflow). ");
        }

        // Leak the data (send out)
        if (current_size > 0) {
            int leak;
            if (current_size >= output_rate) {
                leak = output_rate;
            } else {
                leak = current_size;
            }
            current_size = current_size - leak;
            printf("Leaked %d. ", leak);
        } else {
            printf("Nothing to leak. ");
        }

        printf("Current bucket size: %d\n", current_size);
    }

    return 0;
}


